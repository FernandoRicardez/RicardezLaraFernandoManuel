// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using Vecinos2.Models;
using Vecinos2.Controllers;
using Photos;

namespace Vecinos2
{
	public partial class AdminUserVC : UIViewController
	{

        bool EditMode;
        UITapGestureRecognizer profileTapGesture;
        UserController userController;
        int flag = 0; 

		UserModel currentUser;
        public UserAdminTabVC Delegate { get; set; }
		public AdminUserVC (IntPtr handle) : base (handle)
		{
		}

		public void setArea(UserAdminTabVC adminUserVC, UserModel user)
        {
            Delegate = adminUserVC;
            currentUser = user;

			this.NavigationItem.Title = currentUser.Name;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
			//Add events
            BtnEdit.Clicked += BtnEdit_Clicked;
			BtnDisableAccount.TouchUpInside += BtnDisableAccount_TouchUpInside; 
			BtnEnableAccount.TouchUpInside += BtnEnableAccount_TouchUpInside;
            profileTapGesture = new UITapGestureRecognizer(tapGestureListenner) { Enabled = false };

            userController = new UserController();

            userController.ProfileImageFetched += UserController_ProfileImageFetched;


            userController.GetImageFromUser(currentUser.Uid);
            InitializeComponents(); 

        }

        void InitializeComponents()
        {
            TxtNameAdmin.Text = currentUser.Name;
            TxtPhoneAdmin.Text = currentUser.Phone;
            TxtAddressAdmin.Text = currentUser.Address;

            if (currentUser.UserStatus == UserModel.userStatus.Authorized)
            {
                BtnEnableAccount.Enabled = false;
				BtnEnableAccount.BackgroundColor = UIColor.LightGray;
            }
            else if (currentUser.UserStatus == UserModel.userStatus.UnAuthorized)
				{
					BtnDisableAccount.Enabled = false;
					BtnDisableAccount.BackgroundColor = UIColor.LightGray;
				}
                
			

		}


        [Export("imagePickerController:didFinishPickingMediaWithInfo:")]
        public void FinishedPickingMedia(UIImagePickerController picker, NSDictionary info)
        {
            //TODO: falta enviarlo a FIREBASE
            var image = info[UIImagePickerController.OriginalImage] as UIImage;
            ImgProfilePicture.Image = image;
            flag = 1;
            picker.DismissViewController(true, null);
        }

        [Export("imagePickerControllerDidCancel:")]
        public void Canceled(UIImagePickerController picker)
        {
            picker.DismissViewController(true, null);
            flag = 1;
        }

        void UserController_ProfileImageFetched(object sender, UserGetImageEventArgs e)
        {
            ImgProfilePicture.Image = e.ProfileImage;
        }


        public override void ViewWillAppear(bool animated)
        {
            UIApplication.SharedApplication.StatusBarStyle = UIStatusBarStyle.LightContent;

            base.ViewWillAppear(animated);
            if (flag != 1)
            {
                LoadData();
            }
        }



        void LoadData()
        {
            BtnEdit.Title = "Editar";
            LblChange.Hidden = true;
            TxtNameAdmin.Enabled = false;
            TxtPhoneAdmin.Enabled = false;
            TxtAddressAdmin.Enabled = false;
            ViewProfilePicture.AddGestureRecognizer(profileTapGesture);
            EditMode = false;
        }

        public override void DidReceiveMemoryWarning()
        {
            base.DidReceiveMemoryWarning();
            // Release any cached data, images, etc that aren't in use.
        }

		void BtnDisableAccount_TouchUpInside(object sender, EventArgs e)
		{
			userController.setStatusForUser(currentUser.Uid, UserModel.userStatus.UnAuthorized);
			BtnDisableAccount.Enabled = false;
			BtnDisableAccount.BackgroundColor = UIColor.LightGray;

			BtnEnableAccount.Enabled = true;
			BtnEnableAccount.BackgroundColor = UIColor.FromRGB((byte)77,(byte)112,(byte)255);
          

		}

		void BtnEnableAccount_TouchUpInside(object sender, EventArgs e)
		{
			userController.setStatusForUser(currentUser.Uid, UserModel.userStatus.Authorized);
			BtnEnableAccount.Enabled = false;
			BtnEnableAccount.BackgroundColor = UIColor.LightGray;

			BtnDisableAccount.Enabled = true;
			BtnDisableAccount.BackgroundColor = UIColor.Red;
		}


        void BtnEdit_Clicked(object sender, EventArgs e)
        {
            EditMode = !EditMode;
            BtnEdit.Title = EditMode ? "Hecho" : "Editar";
            profileTapGesture.Enabled = EditMode;
            LblChange.Hidden = !EditMode;
            TxtNameAdmin.Enabled = EditMode;
            TxtPhoneAdmin.Enabled = EditMode;

            if (!EditMode)
            {
                UpdateUserProfile();
            }

        }

        void UpdateUserProfile()
        {
            UserModel user = currentUser;
            user.Name = TxtNameAdmin.Text;
            user.Address = TxtNameAdmin.Text;
            user.Phone = TxtPhoneAdmin.Text;

            userController.UpdateUserProfile(user, ImgProfilePicture.Image);
        }

        void tapGestureListenner()
        {
            UIAlertController alert = UIAlertController.Create(null, null, UIAlertControllerStyle.ActionSheet);
            alert.AddAction(UIAlertAction.Create("Abrir galeria de fotos", UIAlertActionStyle.Default, TryOpenGallery));
            alert.AddAction(UIAlertAction.Create("Cancelar", UIAlertActionStyle.Cancel, null));

            PresentViewController(alert, true, null);
        }

        void TryOpenGallery(UIAlertAction obj)
        {

            if (!UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.PhotoLibrary))
            {
                return;
            }

            CheckPhotoLibraryAuthorizationsStatus(PHPhotoLibrary.AuthorizationStatus);
        }

        void CheckPhotoLibraryAuthorizationsStatus(PHAuthorizationStatus authorizationStatus)
        {
            switch (authorizationStatus)
            {
                case PHAuthorizationStatus.NotDetermined:
                    // TODO: Pedir permiso para acceder

                    PHPhotoLibrary.RequestAuthorization(CheckPhotoLibraryAuthorizationsStatus);

                    break;
                case PHAuthorizationStatus.Restricted:
                    // TODO: Mostrar un mensaje diciendo que estÃ¡ restringido
                    InvokeOnMainThread(() => { ShowMessage("Error", "El recuerso no esa dispiie", NavigationController); });
                    break;
                case PHAuthorizationStatus.Denied:
                    // TODO: Mostrar un mensaje diciendo que el usuario denego
                    InvokeOnMainThread(() => { ShowMessage("Error", "El recuerso no esta disponible", NavigationController); });
                    break;
                case PHAuthorizationStatus.Authorized:
                    InvokeOnMainThread(() =>
                    {
                        var imagePickerController = new UIImagePickerController
                        {
                            SourceType = UIImagePickerControllerSourceType.PhotoLibrary,
                            Delegate = this
                        };
                        PresentViewController(imagePickerController, true, null);
                    });

                    break;
                default:
                    break;
            }
        }

        void ShowMessage(string title, string message, UIViewController fromViewController)
        {

            UIAlertController alert = UIAlertController.Create(title, message, UIAlertControllerStyle.Alert);
            alert.AddAction(UIAlertAction.Create("OK", UIAlertActionStyle.Default, null));

            fromViewController.PresentViewController(alert, true, null);
        }
        
        
    }
}
